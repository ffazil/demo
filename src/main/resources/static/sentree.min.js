function handleUserIpCalls() {
    var a = ["http://jsonip.appspot.com/", "http://jsonip.com/"], b = 0;
    for (createJSONIpCall(a[b++]); b < a.length && "UNKNOWN" == this.userIp;) {
        var c = a[b];
        setTimeout(function () {
            "UNKNOWN" == this.userIp && createJSONIpCall(c)
        }, 2100), b++
    }
}
function createJSONIpCall(a) {
    $.ajax({
        url: a, dataType: "jsonp", data: {}, success: function (a) {
            setUserIp(a)
        }, timeout: 2e3
    })
}
function setUserIp(a) {
    "UNKNOWN" == this.userIp && (this.userIp = a.ip)
}
function setTreeType(a) {
    this.binaryTreeType = a
}
function setUnkWordList(a) {
    a.length > 0 && (this.unkWordList = a)
}
function drawTree(a, b, c, d) {
    function w(a, b, c, d) {
        if (d.pixelBegin = a, d.pixelEnd = b, d.level = c, d.leaf) d.pixelCenter = (a + b) / 2, d.isLeaf = !0; else {
            for (var e = d.child0, f = d["child" + (d.numChildren - 1)], g = 0, h = 0; h < d.numChildren; h++)g += d["child" + h].pixels;
            for (var i = (d.pixels - g) / (d.numChildren - 1), j = a, h = 0; h < d.numChildren; h++) {
                var k = d["child" + h];
                w(j, j + k.pixels, c + 1, k), j = j + k.pixels + i
            }
            d.pixelCenter = (e.pixelCenter + f.pixelCenter) / 2, d.isLeaf = !1
        }
    }

    function x(a, b) {
        function k(a, b, e) {
            var f = d3.select("g.scoringGroup_" + c).style("visibility", "visible"), g = 280, h = 10, i = 50;
            f.select(".scoringText.phrase").html('<div class="scoring" style="width: ' + (g - 40) + 'px;">' + e + "</div>");
            var j = f.select(".scoringText.phrase").style("height");
            f.select(".scoringText.fo").attr("height", j);
            var k = 150 + parseFloat(j.replace("px", "")), l = d.treeWidth, m = d.treeHeight, n = 40;
            a + n + g >= l ? a = a - n - g : a += n, b + k + n >= m ? b = m - k - n : b > k / 2 ? b -= k / 2 : b = n;
            var o = "translate(" + a + "," + b + ")";
            f.attr("transform", o);
            var p = function () {
                d3.select(this).style("opacity", 1)
            }, q = function () {
                d3.select(this).style("opacity", .45)
            };
            f.select(".scoringRect").attr("height", k), f.selectAll(".scoringSubmit").attr("y", k - 15), f.selectAll(".scoringCircLabel").attr("y", k - 50);
            var r = f.selectAll(".scoringCirc").data(scoreTypes).attr("class", function (a) {
                return "scoringCirc scoringCirc_" + a.score
            }).attr("cx", function (a, b) {
                return i * b + 40
            }).attr("cy", k - 75).attr("r", h).style("fill", function (a) {
                return a.color
            }).style("opacity", .45).style("cursor", "pointer").on("mouseover", p).on("mouseout", q).on("click", function (a) {
                var c = d3.select(this);
                t && v.value == a.score ? (c.style("opacity", .45).attr("r", h).on("mouseout", q), t = !1, v.value = a.score) : (f.selectAll(".scoringCirc").style("opacity", .45).attr("r", h).on("mouseout", q), c.style("opacity", 1).attr("r", h + 5).on("mouseout", p), t = !0, v.value = a.score)
            }).on("dblclick", function (a) {
                var b = d3.select(this);
                f.selectAll(".scoringCirc").style("opacity", .45).attr("r", h).on("mouseout", q), b.style("opacity", 1), v.value = a.score, A(), C()
            });
            r.exit().remove()
        }

        function l(a, c) {
            s && (d3.selectAll(".tooltip").style("opacity", 0).transition().duration(500), k(a, c, F(b.text)), v.text = b.text, v.rating = b.rating, v.node = b.index, v.tree = b)
        }

        function m() {
            if (!s) {
                var a = d3.event.pageX, b = d.treeWidth;
                h.transition().duration(150).style("left", function () {
                    var c = parseFloat(h.style("width").replace("px", ""));
                    return a + 20 + c >= b ? a - 20 - c + "px" : a + 20 + "px"
                }).style("top", d3.event.pageY + 20 + "px").style("opacity", TOOLTIPOPACITY), n()
            }
        }

        function n() {
            if (!s) {
                var a = b.scoreDistr, c = z(a), e = d3.event.pageX, f = d.treeWidth;
                h.style("left", function () {
                    var a = parseFloat(h.style("width").replace("px", ""));
                    return e + 20 + a >= f ? e - 20 - a + "px" : e + 20 + "px"
                }).style("top", d3.event.pageY + 20 + "px").style("opacity", TOOLTIPOPACITY).html(F(b.text) + "<br />" + c + "<br />")
            }
        }

        function o() {
            s || h.transition().style("opacity", 0)
        }

        var e = b.pixelCenter, f = b.level, g = "div.tree_" + c + ".tooltip", h = d3.selectAll(g);
        if (!b.isLeaf)for (var i = 0; i < b.numChildren; i++) {
            var j = b["child" + i];
            a.append("svg:line").attr("class", "link").attr("x1", q(e)).attr("y1", r(f) + 3 * d.treeNodeRadius / 5).attr("x2", q(j.pixelCenter)).attr("y2", r(j.level) - d.treeNodeRadius).attr("stroke", "rgb(0,0,0)").attr("stroke-width", 1).attr("stroke-opacity", .5)
        }
        if (d.showNodeLabels ? (a.append("svg:circle").attr("class", function () {
                return "node nodeCirc node_" + b.index
            }).attr("cx", q(e)).attr("cy", r(f)).attr("r", d.treeNodeRadius).attr("stroke", "rgb(0,0,0)").attr("stroke-width", .5).attr("fill", getRatingColor(getRating(b.rating))).style("cursor", "pointer").on("mouseover", m).on("mousemove", n).on("mouseout", o).on("click", function () {
                s || (s = !0, l(q(e), r(f)))
            }), a.append("svg:text").attr("class", function () {
                return "node nodeLabel node_" + b.index
            }).attr("x", q(e)).attr("y", r(f) + .3 * d.treeNodeRadius).attr("stroke-width", 0).attr("fill", getRatingLabelColor(getRating(b.rating))).attr("font-family", "Verdana").attr("font-size", .6 * d.treeNodeRadius + "pt").attr("text-anchor", "middle").text(getRatingLabel(b.rating)).style("cursor", "pointer").on("mouseover", m).on("mousemove", n).on("mouseout", o).on("click", function () {
                s || (s = !0, l(q(e), r(f)))
            })) : a.append("svg:circle").attr("class", function () {
                return "node nodeCirc node_" + b.index
            }).attr("cx", q(e)).attr("cy", r(f)).attr("r", d.treeNodeRadius).attr("stroke", "rgb(0,0,0)").attr("stroke-width", .5).attr("fill", getRatingColor(getRating(b.rating))), !b.isLeaf)for (var i = 0; i < b.numChildren; i++)x(a, b["child" + i])
    }

    function y(a, b) {
        var c = ".nodeCirc.node_" + b.index, d = ".nodeLabel.node_" + b.index;
        a.selectAll(d).attr("fill", getRatingLabelColor(getRating(b.rating))).text(getRatingLabel(b.rating)), a.selectAll(c).attr("fill", getRatingColor(getRating(b.rating)))
    }

    function z(a) {
        var b = 24, c = 3, d = 10, e = 5, f = 5 * (b + c), g = 100, h = 25, i = 25,
            j = '<svg width="' + (f + e + 2 * h) + '" height="' + (g + d + 2 * i) + '">';
        j += "<g>";
        var k = '<line x1="' + h + '" x2="' + (h + f + e);
        j = j + k + '" y1="' + (0 + i + d) + '" y2="' + (0 + i + d) + '" style="stroke: #dddddd;"></line>', j = j + k + '" y1="' + (g / 2 + i + d) + '" y2="' + (g / 2 + i + d) + '" style="stroke: #dddddd;"></line>', j = j + k + '" y1="' + (g + i + d) + '" y2="' + (g + i + d) + '" style="stroke: #111111; stroke-width: 0.5px;"></line>', j += "</g>";
        for (var l = "", m = "", n = "", o = 0; o < a.length; o++) {
            var p = Math.round(100 * a[o]), q = h + o * (b + c), r = g + i + d - p, s = p, t = scoreTypes[o].color,
                u = ' x="' + q + '" y="' + r + '" ',
                v = '<rect class="bar"' + u + 'width="' + b + '" height="' + s + '" + fill="' + t + '"></rect>',
                w = '<text class="barval"' + u + 'dx="12" dy="-2" ' + 'font-family="sans-serif" font-size="11px" fill="#666" text-anchor="middle">' + p + "</text>",
                x = '<text class="rule" x="' + q + '" y="' + (g + i + d) + '" dx="12" dy="15" ' + 'text-anchor="middle">' + scoreTypes[o].symbol + "</text>";
            l += v, m += w, n += x
        }
        return j = j + "<g>" + l + "</g>", j = j + "<g>" + m + "</g>", j = j + "<g>" + '<line x1="' + h + '" x2="' + h + '" y1="' + i + '" y2="' + (i + d + g) + '" style="stroke: #000000; stroke-width: 0.5px;"></line>' + "</g>", j = j + "<g>" + n + '<text class="rule" x="' + h + '" y="' + (i + d) + '" dx="-5" dy=".35em" text-anchor="end">&#37;</text>' + "</g>", j += "</svg>"
    }

    function A() {
        var c = {};
        c.user = this.userIp, c.query = b.text, c.binarized = this.binaryTreeType, c.node = v.node, c.text = v.text, c.oldscore = v.rating, c.newscore = 5 * (v.value - 1) + 3, c.time = date.getTime();
        var d = v.tree;
        d.updated || void 0 != d.oldscore || (d.oldscore = d.rating), d.updated = !0, c.oldscore == c.newscore ? B(c, "jreinf", loggerURL) : (d.rating = c.newscore, u.push(c), B(c, "json", loggerURL), y(a, d))
    }

    function B(a, b, c) {
        var d = "application/" + b + "; charset=utf-8";
        $.ajax({
            type: "POST",
            url: c,
            data: JSON.stringify(a, null, 2),
            datatype: "json",
            contentType: d,
            mimeType: "application/json"
        })
    }

    function C() {
        s = !1, t = !1, v = {value: 0}, a.selectAll(".scoringGroup").style("visibility", "hidden"), d3.selectAll(".tooltip").style("opacity", 0).transition().duration(500)
    }

    function D() {
        var b = 280, d = 180, e = 10, f = 50, g = a.append("svg:g").attr("class", function () {
            return "scoringGroup scoringGroup_" + c
        }).attr("width", b).attr("height", d);
        g.append("svg:rect").attr("class", "scoringRect").attr("rx", 8).attr("ry", 8).attr("width", b).attr("height", d).style("fill", "seashell").style("stroke", "#666").style("stroke-width", 2), g.append("svg:text").attr("class", "scoringText instr").attr("width", b - 40).attr("height", "auto").attr("x", 20).attr("y", 20).attr("dy", ".71em").attr("font-family", "Helvetica").attr("font-size", "10pt").style("fill", "#666").text("Please correct the sentiment for:"), g.append("svg:foreignObject").attr("class", "scoringText fo").attr("x", 20).attr("y", 45).attr("width", b - 40).attr("height", d - 45 - 85 - e).append("xhtml:body").style("background", "seashell").attr("class", "scoringText phrase").html('<div class="scoring" style="width: ' + (b - 40) + 'px;">' + "{ selected node }" + "</div>");
        var i = function () {
            d3.select(this).style("opacity", 1)
        }, j = function () {
            d3.select(this).style("opacity", .45)
        };
        g.selectAll(".scoringCirc").data(scoreTypes).enter().append("svg:circle").attr("class", function (a) {
            return "scoringCirc scoringCirc_" + a.score
        }).attr("cx", function (a, b) {
            return f * b + 40
        }).attr("cy", d - 85).attr("r", e).style("fill", function (a) {
            return a.color
        }).style("opacity", .45).style("cursor", "pointer").on("mouseover", i).on("mouseout", j), g.selectAll(".scoringCircLabel").data(scoreTypes).enter().append("svg:text").attr("class", "scoringCircLabel").attr("x", function (a, b) {
            return f * b + 40
        }).attr("y", d - 50).attr("font-family", "Helvetica").attr("text-anchor", "middle").text(function (a) {
            return a.symbol
        }), g.append("svg:text").attr("class", "scoringSubmit scoringSubmitYes").attr("x", b - 15).attr("y", d - 15).attr("text-anchor", "end").attr("font-size", "22pt").style("fill", "#cccccc").style("cursor", "pointer").text(heavyCheckMark).on("mouseover", function () {
            d3.select(this).style("fill", "#2ca02c")
        }).on("mouseout", function () {
            d3.select(this).style("fill", "#cccccc")
        }).on("click", function () {
            t && (A(), C())
        }), g.append("svg:text").attr("class", "scoringSubmit scoringSubmitNo").attr("x", b - 55).attr("y", d - 15).attr("text-anchor", "end").attr("font-size", "22pt").style("fill", "#cccccc").style("cursor", "pointer").text(heavyBallotX).on("mouseover", function () {
            d3.select(this).style("fill", "#d62728")
        }).on("mouseout", function () {
            d3.select(this).style("fill", "#cccccc")
        }).on("click", function () {
            C()
        }), g.style("visibility", "hidden")
    }

    function E(a, b) {
        function f(a) {
            return a = a.replace(/-LRB-/gi, "("), a = a.replace(/-RRB-/gi, ")"), a = a.replace(/-LCB-/gi, "{"), a = a.replace(/-RCB-/gi, "}"), a = a.replace(/-LSB-/gi, "["), a = a.replace(/-RSB-/gi, "]")
        }

        var c = b.pixelCenter, d = b.level;
        if (b.isLeaf) a.append("svg:text").attr("class", "label").attr("x", q(c) + o).attr("y", r(d + .5) + p).attr("text-anchor", n).attr("font-family", "Georgia").attr("font-size", m + "pt").attr("stroke-width", 0).attr("fill", "#000").text(function () {
            return f(b.text)
        }), this.unkWordList.indexOf(b.text) > -1 && a.append("svg:text").attr("class", "unk").attr("x", q(c) + o).attr("y", r(d + .5) + p + m + 2).attr("text-anchor", n).attr("font-family", "Georgia").attr("font-size", m - 1.5 + "pt").attr("stroke-width", 0).attr("fill", "#999").text("-unk-"); else for (var e = 0; e < b.numChildren; e++)E(a, b["child" + e])
    }

    function F(a) {
        return a = a.replace(/-LRB-/gi, "&#40;"), a = a.replace(/-RRB-/gi, "&#41"), a = a.replace(/-LCB-/gi, "&#123"), a = a.replace(/-RCB-/gi, "&#125"), a = a.replace(/-LSB-/gi, "&#91"), a = a.replace(/-RSB-/gi, "&#93")
    }

    var e = b.pixels, f = b.depth, g = d.treeLeftRightPadding, h = d.treeWidth - d.treeLeftRightPadding,
        i = d.treeTopPadding, j = d.treeHeight - d.treeBottomPadding, k = .98 * (h - g), l = e * d.treeFontSize / 10,
        m = null;
    m = k > l ? d.treeFontSize : d.treeFontSize * (k / l), 6 > m && (m = 6);
    var n = "middle", o = 0, p = 10, q = d3.scale.linear().domain([0, e + 1]).range([g, h]),
        r = d3.scale.linear().domain([0, f + 1]).range([i, j]), s = !1, t = !1, u = [], v = {value: 0};
    w(0, e, 1, b), x(a, b), d.showLeafLabels && E(a, b), D()
}
var TOOLTIPOPACITY = .91, baseURL2 = "http://nlp.stanford.edu:8080/sentiment/", loggerURL = baseURL2 + "logger.html",
    date = new Date, getRatingColor = function () {
        for (var a = [[103, 0, 31], [178, 24, 43], [214, 96, 77], [244, 165, 130], [253, 219, 199], [247, 247, 247], [209, 229, 240], [146, 197, 222], [67, 147, 195], [33, 102, 172], [5, 48, 97]], b = [], c = [], d = 0; d < a.length; d++) {
            var e = c3.rgb(a[d][0] / 255, a[d][1] / 255, a[d][2] / 255).lab(), f = e;
            b.push(f), c.push(f.toString())
        }
        var g = d3.scale.linear().domain([-1, 1]).range([0, 10]), h = function (a) {
            return c[Math.round(g(a))]
        };
        return h
    }(), getRatingLabelColor = function () {
        for (var a = [[103, 0, 31], [178, 24, 43], [214, 96, 77], [244, 165, 130], [253, 219, 199], [247, 247, 247], [209, 229, 240], [146, 197, 222], [67, 147, 195], [33, 102, 172], [5, 48, 97]], b = [], c = [], d = 0; d < a.length; d++) {
            var e = c3.rgb(a[d][0] / 255, a[d][1] / 255, a[d][2] / 255).lab();
            if (e.lightness() < 30)var f = c3.lch(.6 * e.lightness() + 40, e.chroma(), e.hue()); else var f = c3.lch(.6 * e.lightness(), e.chroma(), e.hue());
            b.push(f), c.push(f.toString())
        }
        var g = d3.scale.linear().domain([-1, 1]).range([0, 10]), h = function (a) {
            return c[Math.round(g(a))]
        };
        return h
    }(), getRating = function () {
        var a = d3.scale.linear().domain([2, 24]).range([-1, 1]), b = function (b) {
            return Math.min(1, Math.max(-1, a(b)))
        };
        return b
    }(), getRatingLabel = function () {
        var a = function (a) {
            return Math.floor(a), a >= 21 ? "++" : a >= 16 ? "+" : a >= 11 ? "0" : a >= 6 ? "\u2212" : "\u2212\u2212"
        };
        return a
    }(), scoreTypes = [{color: "#B2182B", score: 1, symbol: "\u2212 \u2212"}, {
        color: "#F4A582",
        score: 2,
        symbol: "\u2212"
    }, {color: "#bdbdbd", score: 3, symbol: "0"}, {color: "#92C5DE", score: 4, symbol: "+"}, {
        color: "#2166AC",
        score: 5,
        symbol: "+ +"
    }], heavyCheckMark = "\u2714", ballotX = "\u2717", heavyBallotX = "\u2718", userIp = "UNKNOWN",
    binaryTreeType = "UNKNOWN", unkWordList = [];