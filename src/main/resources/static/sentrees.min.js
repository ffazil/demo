function drawTrees(a, b, c) {
    function p(a, b) {
        var c = ["tree", "tree_" + b];
        return c.join(" ")
    }

    function q(a) {
        var c = function () {
            var c = b[a];
            "overview" == c.state ? (s(c, a), c.state = "detail") : "detail" == c.state && (r(c, a), c.state = "overview", d3.selectAll("div.tooltip").transition().duration(150).style("opacity", 1e-6))
        };
        return c
    }

    function r(a, b) {
        var c = d3.select("div.tree_" + b), e = c.select("svg");
        e.selectAll("*").remove(), c.selectAll(".btn-small").remove();
        var h = q(b);
        e.on("dblclick", h);
        var i = e.append("svg:g").style("width", d.treeWidth + "px").style("height", d.treeHeight + "px");
        drawTree(i, a, b, d), e.transition().duration(640).style("width", d.treeWidth + "px").style("height", d.treeHeight + "px"), i.append("svg:text").attr("class", "button").attr("x", d.treeWidth).attr("y", d.treeHeight).attr("text-anchor", "end").attr("font-family", "Helvetica").attr("font-size", "22pt").text("\u21f2").style("fill", "#cccccc").style("cursor", "pointer").on("click", h).on("mouseover", f).on("mouseout", g).transition().duration(640)
    }

    function s(a, b) {
        var c = d3.select("div.tree_" + b), d = c.select("svg");
        d.selectAll("*").remove(), d.on("dblclick", null);
        var h = d.append("svg:g").style("width", e.treeWidth + "px").style("height", e.treeHeight + "px");
        drawTree(h, a, b, e), d.transition().duration(640).style("width", e.treeWidth + "px").style("height", e.treeHeight + "px");
        var i = q(b), j = function () {
            updateDisplayLiveDemoTree(a, !0), c.selectAll(".btn-save").remove(), c.append("rect").attr("class", "btn btn-small btn-thanks").style("text-decoration", "none").style("cursor", "default").text("Saved. Thank you!")
        };
        h.append("svg:text").attr("class", "button").attr("x", e.treeWidth).attr("y", 0).attr("dx", -25).attr("dy", 25).attr("text-anchor", "start").attr("font-family", "Helvetica").attr("font-size", "28pt").text("\xd7").style("fill", "#cccccc").style("cursor", "pointer").on("click", i).on("mouseover", f).on("mouseout", g).transition().duration(640), c.append("rect").attr("class", "btn btn-small btn-next btn-save").style("color", "#fff").style("text-decoration", "none").text("All labels are now correct").on("click", j).transition().duration(640)
    }

    var d = {
        treeLeftRightPadding: 10,
        treeTopPadding: 0,
        treeBottomPadding: 0,
        treeWidth: 240,
        treeHeight: 200,
        treeFontSize: 6,
        treeNodeRadius: 6,
        showLeafLabels: !1,
        showNodeLabels: !1
    }, e = {
        treeLeftRightPadding: 25,
        treeTopPadding: 0,
        treeBottomPadding: 10,
        treeWidth: 1200,
        treeHeight: 400,
        treeFontSize: 10,
        treeNodeRadius: 10,
        showLeafLabels: !0,
        showNodeLabels: !0
    }, f = function () {
        d3.select(this).style("fill", "#d62728")
    }, g = function () {
        d3.select(this).style("fill", "#cccccc")
    };
    a.selectAll("*").remove(), a.selectAll("div.tree").data(b).enter().append("div").attr("class", p);
    var h = parseFloat(d3.select(".trees").style("width").replace("px", "")),
        i = parseFloat(d3.select("div.trees").style("padding").replace("px", ""));
    (isNaN(i) || 0 == i) && (i = 10), e.treeWidth = h - 2 * i - 2, d.treeWidth = h / 4 - 2 * i - 2;
    for (var j = 0; j < b.length; j++) {
        var k = d3.select("div.tree_" + j);
        q(j);
        var m = k.append("svg:svg").style("width", d.treeWidth + "px").style("height", d.treeHeight + "px");
        if (c.filterByIndexList[j] >= 0) {
            var n = m.append("svg:g").style("width", d.treeWidth + "px").style("height", d.treeHeight + "px"), o = b[j];
            c.filterByIndexList[j] >= 1 ? (o.state = "detail", drawTree(n, o, j, e), s(o, j)) : (o.state = "overview", drawTree(n, o, j, d), r(o, j)), k.style("display", null)
        } else {
            var o = b[j];
            o.state = "hidden", k.style("display", "none")
        }
        divTooltip = k.append("div").attr("class", function () {
            return ["tooltip", "tree_" + j].join(" ")
        }).style("opacity", 0)
    }
    s(b[0], 0), b[0].state = "detail"
}
function updateDisplayLiveDemoTree(a, b) {
    function d(a, b, c) {
        var d = "application/" + b + "; charset=utf-8";
        $.ajax({
            type: "POST",
            url: c,
            data: JSON.stringify(a, null, 2),
            datatype: "json",
            contentType: d,
            mimeType: "application/json"
        })
    }

    function e(a) {
        var b = {};
        return b.pp = [], b.phrases = [], b.scores = [], b.oldscores = [], f(a, b), b.user = this.userIp, b.query = a.text, b.binarized = this.binaryTreeType, b.time = date.getTime(), b
    }

    function f(a, b) {
        var c = a.index;
        if (!a.isLeaf && a.numChildren > 0)for (var d = 0; d < a.numChildren; d++) {
            var e = a["child" + d].index;
            b.pp[e] = c, f(a["child" + d], b)
        }
        void 0 == b.pp[c] && (b.pp[c] = 0), b.phrases[c] = a.text, b.scores[c] = a.rating, 1 == a.updated ? b.oldscores[c] = a.oldscore : (void 0 == b.oldscores[c] || null == b.oldscores[c]) && (b.oldscores[c] = null)
    }

    if (b) {
        var c = e(a);
        d(c, "jdemotree", loggerURL)
    }
}