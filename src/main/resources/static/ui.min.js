function initPage() {
    function b(b) {
        prevSource = a, data = b, initControls(), initSearch(), renderAllTrees()
    }

    var a = d3.select("input.source")[0][0].value;
    d3.json(a, b)
}
function refreshRequest() {
    function b(b) {
        prevSource = a, data = b, renderAllTrees()
    }

    var a = d3.select("input.source")[0][0].value;
    prevSource != a ? (d3.select("div.trees").selectAll("*").remove(), d3.json(a, b)) : renderAllTrees()
}
function readParametersFromQueryString() {
    var a = document.location.search.match(/[?&]i=([^&]*)/g);
    null != a && (a = a[0].substr(3), d3.select("input.filterByIndexStr")[0][0].value = a)
}
function writeParametersToQueryString() {
    var a = params.filterByIndexStr.length > 0 ? "?i=" + params.filterByIndexStr : "";
    history.pushState(null, null, a)
}
function initControls() {
    readParametersFromQueryString(), d3.select("input.refresh").on("click", refreshRequest)
}
function renderAllTrees() {
    function a() {
        params.filterByIndexStr = "", params.filterByIndexList = [];
        var a = d3.select("input.filterByIndexStr")[0][0].value;
        if (a.length > 0) {
            a = a.split(/\s*,\s*/g);
            for (var b = 0; b < a.length; b++)if (a[b].indexOf("-") >= 0) {
                var c = a[b].split(/[ ]*\-[ ]*/g);
                if (2 == c.length) {
                    c[0] = parseInt(c[0], 10), c[1] = parseInt(c[1], 10), params.filterByIndexStr += (params.filterByIndexStr.length > 0 ? "," : "") + c[0] + "-" + c[1];
                    for (var d = c[0]; d <= c[1]; d++)params.filterByIndexList.push(parseInt(d, 10))
                }
            } else params.filterByIndexStr += (params.filterByIndexStr.length > 0 ? "," : "") + a[b], params.filterByIndexList.push(parseInt(a[b], 10))
        }
        writeParametersToQueryString()
    }

    a(), drawTrees(d3.select("div.trees"), data.trees, params)
}
function initSearch() {
    function a() {
        var a = d3.select(this)[0][0].value;
        if ("" == a) {
            console.log("[Search]: ---");
            for (var b in data.trees)d3.select("div.tree_" + b).style("background", null)
        } else {
            console.log("[Search]: " + a);
            var c = new RegExp(a, "g");
            for (var b in data.trees) {
                var d = data.trees[b];
                d.text.match(c) ? d3.select("div.tree_" + b).style("background", "#ffc") : d3.select("div.tree_" + b).style("background", null)
            }
        }
    }

    d3.select("input.search").on("keyup", a)
}
var data = null, params = {filterByIndexStr: "", filterByIndexList: []}, prevSource = null;